# Generated by Django 5.1.4 on 2025-08-03 08:41

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('entities', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Packaging',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('length', models.DecimalField(decimal_places=2, max_digits=6, verbose_name='Length in cm')),
                ('width', models.DecimalField(decimal_places=2, max_digits=6, verbose_name='Width in cm')),
                ('height', models.DecimalField(decimal_places=2, max_digits=6, verbose_name='Height in cm')),
                ('volume', models.DecimalField(decimal_places=2, max_digits=6, verbose_name='Volume in litres')),
                ('net_weight', models.DecimalField(decimal_places=2, max_digits=6, verbose_name='Net weight in kg')),
                ('gross_weight', models.DecimalField(decimal_places=2, max_digits=6, verbose_name='Gross weight in kg')),
                ('name', models.CharField(default='Unnamed Packaging', editable=False, max_length=255, verbose_name='Packaging name')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
            ],
            options={
                'verbose_name': 'Packaging',
                'verbose_name_plural': 'Packagings',
                'constraints': [models.CheckConstraint(condition=models.Q(('gross_weight__gt', models.F('net_weight'))), name='gross_weight_gt_net_weight')],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=70, verbose_name='Product name')),
                ('description', models.TextField(verbose_name='Product description')),
                ('description_html', models.CharField(default='', max_length=255, verbose_name='Product description HTML file')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('vendor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vendor_products', to='entities.entity', verbose_name='Vendor')),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
            },
        ),
        migrations.CreateModel(
            name='Stock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField(verbose_name='Quantity of products in this packaging')),
                ('price', models.DecimalField(decimal_places=2, max_digits=12, verbose_name='Price per packaging')),
                ('stock_quantity', models.IntegerField(default=0, verbose_name='Stock quantity of this packaging')),
                ('reserved_quantity', models.IntegerField(default=0, verbose_name='Reserved quantity')),
                ('ordered_quantity', models.IntegerField(default=0, verbose_name='Ordered quantity')),
                ('packaging', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stock_entries', to='products.packaging', verbose_name='Packaging')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stock_entries', to='products.product', verbose_name='Product')),
            ],
            options={
                'verbose_name': 'Stock',
                'verbose_name_plural': 'Stocks',
                'constraints': [models.CheckConstraint(condition=models.Q(('stock_quantity__gte', 0)), name='stock_quantity_non_negative'), models.CheckConstraint(condition=models.Q(('reserved_quantity__gte', 0)), name='reserved_quantity_non_negative'), models.CheckConstraint(condition=models.Q(('ordered_quantity__gte', 0)), name='ordered_quantity_non_negative'), models.CheckConstraint(condition=models.Q(('reserved_quantity__lte', models.F('stock_quantity'))), name='reserved_not_exceed_stock')],
            },
        ),
    ]
